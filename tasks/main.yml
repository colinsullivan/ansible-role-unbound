---

- name: install unbound
  package: pkg=unbound state={{ unbound_pkg_state }}
  when: not unbound_only_zones
  tags: ["packages", "unbound"]
  register: pkg_result
  until: pkg_result is success

- name: Ensure zones folder exist
  file: path=/etc/unbound/conf.d state=directory mode=0755
  notify: restart unbound
  tags: ["configuration", "unbound"]

- name: Ensure log file exist
  file: path={{ unbound_logfile }} state=touch mode=0755 owner=unbound
  notify: restart unbound
  tags: ["configuration", "unbound"]

- name: configure add independant config file
  template:
    src: "{{ item }}.j2"
    dest: "/etc/unbound/conf.d/{{ item }}"
  with_items:
     - 01general.conf
     - 99forward_zone.conf
  notify: restart unbound
  when: not unbound_only_zones
  tags: ["configuration", "unbound"]

- name: configure unbound zones
  template:
     src=10zone.conf.j2
     dest="/etc/unbound/conf.d/10{{ item.name }}.conf"
  with_items: "{{ unbound_zones }}"
  notify: restart unbound
  tags: ["configuration", "unbound"]

- name: check root.key status
  stat: path=/var/lib/unbound/root.key
  register: rootkey
- name: ensure we have valid root.key
  command: "unbound-anchor -v -a /var/lib/unbound/root.key"
  ignore_errors: true
  when: not rootkey.stat.exists or rootkey.stat.size == 0

- include: blackhole.yml
  when: unbound_blackhole is defined and unbound_blackhole

- name: configure unbound.conf to include all configuration
  template:
     src=unbound.conf.j2
     dest=/etc/unbound/unbound.conf
     validate="/usr/sbin/unbound-checkconf %s"
  notify: restart unbound
  tags: ["configuration", "unbound"]
  when: not unbound_security
- name: configure unbound.conf to include all configuration (chroot/can't validate)
  template:
     src=unbound.conf.j2
     dest=/etc/unbound/unbound.conf
  notify: restart unbound
  tags: ["configuration", "unbound"]
  when: unbound_security

- include: debian-chroot.yml
  when: unbound_security and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')

- debug: var=unbound_service_enabled
- name: ensure unbound is started/stopped
  service:
     name=unbound
     state={{ unbound_service_state }}
     enabled={{ unbound_service_enabled }}
## [WARNING]: Ignoring "pattern" as it is not used in "systemd"
#     pattern="unbound"
  tags: ["service", "unbound"]
  when: not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: Redhat | Update NetworkManager DNS config
  lineinfile:
    dest: "/etc/sysconfig/network-scripts/ifcfg-{{ ansible_default_ipv4.interface }}"
    regexp: '^DNS1=127.0.0.1'
    line: 'DNS1=127.0.0.1'
    backup: yes'
  when: >
    ansible_os_family == "RedHat"
    and ansible_default_ipv4 is defined and ansible_default_ipv4 != ''

- name: Redhat | Update current resolv.conf
  lineinfile:
    dest: /etc/resolv.conf
    regexp: '^nameserver .*'
    line: 'nameserver 127.0.0.1'
    backup: yes
  when: >
    ansible_os_family == "RedHat" and
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")
